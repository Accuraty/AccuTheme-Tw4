@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@using DotNetNuke.Web.DDRMenu;
@* @using System.Dynamic; *@
@* @using System.Linq; *@
@* @using System.Web; *@
@* @using ToSic.Razor.Blade; *@

@*  WIP - the remote live page is here
    https://accu4.com/More-/TailwindCss-AccuTheme-Tw4
    >>> SEE ASL-ACCU4 /// .../menus/NavSite/NavSite.cshtml for intial WIP <<<
*@

@* NOTE

SITE MENU is being rewritten to use Tailwind CSS from scratch
using the HTML Disclosure elements for a no JS solution.
*@

@*
  Init and trigger the magic.
  ****************************************************************************@

<div class="hidden lg:flex lg:gap-x-1">
  @RenderPages(Model.Source.root.Children)
</div>

@functions
{
  string svgTemplate = $@"      <svg class=""size-5 flex-none text-zinc-700 group/nav-d{{0}}:rotate-180"" viewBox=""0 0 20 20"" fill=""currentColor"" aria-hidden=""true"" data-slot=""icon"">
          <path fill-rule=""evenodd"" d=""M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"" clip-rule=""evenodd"" />
        </svg>
      ";
  public HtmlString RenderPages(IEnumerable<MenuNode> pages)
  {
    System.Text.StringBuilder output = new System.Text.StringBuilder();

    foreach (var page in pages)
    {
      string levelDepth = $"{page.Depth}"; // group/nav-d0 group/nav-d1 group/nav-d2 group/nav-d3 group/nav-d4 group/nav-d5
      string detailsTag = page.HasChildren() ? "details" : "div";
      
      // Creates div before details tag
      string depthWidth = page.Depth < 1 ? "w-max" : "w-auto";
      if(page.Depth < 1) 
      {
        output.AppendLine($"<div class=\"relative {depthWidth} bg-white\">");
      }
      output.AppendLine($"<{detailsTag} class=\"{levelDepth} p-3 open:bg-zinc-100\" name=\"{levelDepth}\">");
      output.AppendLine(MakeTile(page));
      if (page.HasChildren())
      {
        if(page.Depth > 0)
        {
          output.AppendLine($"<div class=\"absolute booya left-0 z-10 mt-5 flex\">");
        }
        output.Append(RenderPages(page.Children).ToString());
        if(page.Depth > 0)
        {
          output.AppendLine("</div>");
        }
      }
      output.AppendLine($"</{detailsTag}>");
      if(page.Depth < 1) 
      {      
        output.AppendLine("</div>");
      }
    }
    return new HtmlString(output.ToString());
  } 

  public string MakeTile(MenuNode page)
  {
    System.Text.StringBuilder output = new System.Text.StringBuilder();
    string debugTooltip = MakeDebugTooltip(page);
    string elNodePageId = $"node-pageid-{page.TabId}";
    string isActive = (page.Depth > 0 && page.Breadcrumb) ? "data-active" : string.Empty;
    bool hasChildren = page.HasChildren();
    string summaryTag = hasChildren ? "summary" : "div";
    output.AppendLine($"<{summaryTag} class=\"flex cursor-pointer list-none items-center gap-4\" {isActive}>");
    output.AppendLine($"<span class=\"font-semibold text-green-700\" title=\"{debugTooltip}\" id=\"{elNodePageId}\">");
    output.AppendLine(MakeLinkOrText(page));
    output.AppendLine($"</span>");
    if(hasChildren)
    {
      // Building SVG Chevron
      string openLevelDepth = $"group-open/nav-d{page.Depth}"; // group-open/nav-d0 group-open/nav-d1 group-open/nav-d2 group-open/nav-d3 group-open/nav-d4 group-open/nav-d5
      output.AppendLine(string.Format(svgTemplate, page.Depth));
    }
    output.AppendLine($"</{summaryTag}>");
    return output.ToString();
  }

  public string MakeLinkOrText(MenuNode page)
  {
    string attrTarget = !string.IsNullOrEmpty(page.Target) ? ($"target=\"{page.Target}\"") : string.Empty;
    string attrHref = page.Enabled ? page.Url : "javascript:void(0);";
    if (page.TabId == 23)
    {
      // swap to Icon output for Search Results page 
      string output = "<i class=\"fa-regular fa-magnifying-glass-arrow-right fa-xl\"></i>";
      output = $"<span>{output}</span>";
      return $"<a href=\"{page.Url}\" {attrTarget} class=\"text-zinc-700 no-underline\">{output}</a>";
    }
    if (page.Enabled)
    {
      return $"<a href=\"{page.Url}\" {attrTarget} class=\"text-zinc-700 no-underline\">{page.Text}</a>";
    }
    return $"<span title=\"{page.Url}\">{page.Text}</span>";
  }

  public string MakeDebugTooltip(MenuNode page)
  {
    return $"TabId: {page.TabId}\n HasChildren: {page.HasChildren()}\n Depth: {page.Depth}\n Enabled: {page.Enabled}\n Breadcrumb: {page.Breadcrumb}\n Target: {page.Target}\n Url: {page.Url}\n Text: {page.Text}";
  }
}
