@using DotNetNuke.Web.DDRMenu;

@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>;

@functions {
  /*

    Below is where you can customize the classes for the menu items using
    Tailwind classes. This version does *not* support changing the HTML.

    The repeating pattern is:
      <div PANEL>
        <div ITEM_WRAPPER>              <-- Link if no children
          <a ITEM><span>TEXT
        <div ITEM_WRAPPER+component>    <-- Button if children
          <button ITEM><span>TEXT
          [repeat PANEL for children]    

    We hope to template-ize this in the future, for now, if you need to change
    the HTML, you'll need to copy the entire component and modify it, code 
    and all.

    Tailwind Classes - used in markup
    **************************************************************************/

  // these go on the A tag
  private string ITEM_CLASSES_ROOT = "text-center px-2 whitespace-nowrap";
  private string ITEM_CLASSES_LEVELS = "text-left px-4";

  // these go on the DIV wrapping the panel (if any)
  private string PANEL_CLASSES_ROOT = "-right-1/3";
  private string PANEL_CLASSES_LEVELS = "-top-10 left-56"; // -left-60

}

@{
  // Componentizing, inverting the styling vs. the data
  
  //if (Page.node == null) { return; } // this never happens, right?
  MenuNode node = Page.node;

  var itemClasses = new List<string> { 
    ITEM_CLASSES, 
    ITEM_CLASSES_FONT_TEXT,
    ITEM_CLASSES_COLOR, 
  };
  itemClasses.Add(isRoot(node) 
    ? ITEM_CLASSES_ROOT 
    : ITEM_CLASSES_LEVELS
  );
}

<!-- node-@node.TabId RenderLink start -->
      <div class="relative p-1 bg-gray-300 
        @(isRoot(node) ? "" : "first:pt-2 last:pb-2")
        @pageId(node)"
      >
        <a href="@(node.Enabled ? node.Url : "#")" 
          @TailwindClass(itemClasses)
        >
          <span class="@ITEM_SPAN_CLASSES">@node.Text</span>
        </a>
      </div>
<!-- node-@node.TabId RenderLink end -->

@functions {

  // TODO: move these to a shared file or to App_Code/AccuTheme
  private bool isRoot(MenuNode node) {
    return node.Depth == 0;
  }
  private string zIndex(MenuNode node) {
    int zepth = node.Depth + 2;
    return "z-" + zepth.ToString() + "0";
  }
  private string pageId(MenuNode node) {
    return "page-" + node.TabId.ToString();
  }

  // Tailwind Class attribute generator
  private HtmlString TailwindClass(List<string> classes, MenuNode node = null) {
    if (node != null) {
      classes.Add(zIndex(node));
    }
    return new HtmlString("class=\"" + String.Join(" ", classes).Replace("  ", " ").Trim() + "\"");
  }

}