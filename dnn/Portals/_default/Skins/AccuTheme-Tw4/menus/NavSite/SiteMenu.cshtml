@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@using DotNetNuke.Web.DDRMenu;
@* @using System.Dynamic; *@
@* @using System.Linq; *@
@* @using System.Web; *@
@* @using ToSic.Razor.Blade; *@

@*  WIP - the remote live page is here
    https://www.accu4.com/SITE/TailwindCss-AccuTheme-Tw4
    Slightly based on this, or used as reference
    https://tailwindflex.com/@emrys11/nested-dropdown
*@

@* NOTE

SITE MENU is being rewritten to use Tailwind CSS from scratch
using the HTML Disclosure elements for a no JS solution.
*@

@*
  Init and trigger the magic.
  ****************************************************************************@

<nav class="fixed w-fit z-50 px-2 py-8">
  @RenderPages(Model.Source.root.Children)
</nav>

@functions
{
  public HtmlString RenderPages(IEnumerable<MenuNode> pages)
  {
    System.Text.StringBuilder output = new System.Text.StringBuilder();

    foreach (var page in pages)
    {
      string mlPageDepth = $"ml-{page.Depth}"; // ml-1 ml-2 ml-3 ml-4 ml-5
      string detailsTag = page.HasChildren() ? "details" : "div";
      
      output.AppendLine($"<{detailsTag} class=\"{mlPageDepth}\" name=\"{mlPageDepth}\">");
      output.AppendLine(MakeTile(page));
      if (page.HasChildren())
      {
        output.Append(RenderPages(page.Children).ToString());
      }
      output.AppendLine($"</{detailsTag}>");
    }
    return new HtmlString(output.ToString());
  }

  public string MakeTile(MenuNode page)
  {
    System.Text.StringBuilder output = new System.Text.StringBuilder();
    string debugTooltip = MakeDebugTooltip(page);
    string elNodePageId = $"node-pageid-{page.TabId}"; 
    string isActive = (page.Depth > 0 && page.Breadcrumb) ? "data-active" : string.Empty;
    string summaryTag = page.HasChildren() ? "summary" : "div";
    output.AppendLine($"<{summaryTag} class=\"bg-gray-100 data-active:bg-gray-300 hover:bg-gray-200 px-1 py-2 mb-1 rounded-lg cursor-pointer shadow-sm\" {isActive}>");
    output.AppendLine($"<span class=\"px-2 font-semibold\" title=\"{debugTooltip}\" id=\"{elNodePageId}\">");
    output.AppendLine(MakeLinkOrText(page));
    output.AppendLine($"</span>");
    output.AppendLine($"</{summaryTag}>");
    return output.ToString();
  }

  public string MakeLinkOrText(MenuNode page)
  {
    string attrTarget = !string.IsNullOrEmpty(page.Target) ? ($"target=\"{page.Target}\"") :string.Empty;
    string attrHref = page.Enabled ? page.Url : "javascript:void(0);";
    if (page.Enabled)
    {
      return $"<a href=\"{page.Url}\" {attrTarget} class=\"text-dark no-underline\">{page.Text}</a>";
    }
    // page is Link Disabled (page.Enabled == false or [TabInfo].DisableLink == true)
    // Better/Accessibility Implementation, see https://github.com/Accuraty/AccuTheme-Tw4/issues/40 
    return $@"
    <a class=""aria-disabled: text-black no-underline cursor-not-allowed pointer-events-none"" 
      role=""link"" aria-disabled=""true"" tabindex=""-1"" 
      title=""This page is Link Disabled (URL would have been: {page.Url})"">
      {page.Text}
    </a>";
  }

  public string MakeDebugTooltip(MenuNode page)
  {
    return $"TabId: {page.TabId}\n HasChildren: {page.HasChildren()}\n Depth: {page.Depth}\n Enabled: {page.Enabled}\n Breadcrumb: {page.Breadcrumb}\n Target: {page.Target}\n Url: {page.Url}\n Text: {page.Text}";
  } 
}
