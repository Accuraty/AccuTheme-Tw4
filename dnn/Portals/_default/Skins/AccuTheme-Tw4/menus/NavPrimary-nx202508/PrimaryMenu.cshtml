@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@using DotNetNuke.Web.DDRMenu;
@* @using System.Dynamic; *@
@* @using System.Linq; *@
@* @using System.Web; *@
@using ToSic.Razor.Blade;
@using Accuraty.Libraries.AccuLadder

@*  WIP 
    1. the remote live page is - any page 
    2. the reference mockup by BEM is here
    https://play.tailwindcss.com/O6RDUQWcAG
    3. discussion about accessibility
    https://www.tiny.cloud/blog/add-accordion-component/ 

NavSITE MENU is being rewritten to use Tailwind CSS from scratch
using the HTML Disclosure elements for a no JS solution.

- got it working in Tw Play (latest link is above) 20250417 BEM
- partially implemented below (svgTemplate, depth and hasChildren changes, etc) 20250417 BEM
- refactor to handle depth 0 vs 1+ changes with groups and more 20250508+ JRF
- rethink with new approach to allow Tw styling of the HTML... 20251001 JRF
*@

@{ 
  // TODO make sure this is false in production 
  Accu.Dev.Debug = false; 

  string MenuWrapper = $@"
    <div class=""hidden lg:flex lg:gap-x-2 z-1"">
      {{0}}
    </div>
  ";

}


@*
  Init and trigger the magic.
  ****************************************************************************@

@RenderNav(Model.Source.root.Children, MenuWrapper)

<div class="absolute top-0 right-0 z-10 min-w-2xs">@Accu.Dev.GetLog(true)</div>

@functions {
  bool debug = Accu.Dev.Debug;

  // group-open/nav-d0 group-open/nav-d1 group-open/nav-d2 group-open/nav-d3 group-open/nav-d4 group-open/nav-d5
  string svgTemplate = $"<svg class=\"size-5 flex-none text-zinc-700 group-open/nav-d{{0}}:rotate-180\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" data-slot=\"icon\"><path fill-rule=\"evenodd\" d=\"M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z\" clip-rule=\"evenodd\" /></svg>";

  public HtmlString RenderNav(IEnumerable<MenuNode> pages, string wrapper = "")
  {
    System.Text.StringBuilder output = new System.Text.StringBuilder();
    
    foreach (var page in pages)
    {
      string levelDepth = $"group/nav-d{page.Depth}"; 
      string detailsTag = page.HasChildren() ? "details" : "div";
      
      // Creates div before details tag
      string depthWidth = page.Depth < 1 ? "w-max" : "w-auto";
      if(page.Depth < 1) 
      {
        output.AppendLine($"<div class=\"relative {depthWidth}\">");
      }
      output.AppendLine($@"<{detailsTag} name=""{levelDepth}"" class=""{levelDepth} p-2 
        open:bg-zinc-100 open:rounded-lg
        details-content:absolute details-content:min-w-48 details-content:mt-5
        details-content:bg-white details-content:rounded-md
      "">");

      // Delete the in between - Creates the two divs
      // output.AppendLine($"<div class=\"absolute left-0 flex z-10 mt-5\">");
      // output.AppendLine($"<div class=\"w-56 shrink rounded-xl bg-white p-4 text-sm/6 font-semibold shadow-lg ring-1 ring-zinc-900/5\">");
      // Delete the in between - Creates the two divs

      output.AppendLine(MakeTile(page));
      if (page.HasChildren())
      {
        if(page.Depth > 0)
        {
          output.AppendLine($"<div class=\"group relative flex items-center gap-x-6 rounded-lg p-3 text-sm/6 hover:bg-gray-50\">");
        }
        output.Append(RenderNav(page.Children).ToString());
        if(page.Depth > 0)
        {
          output.AppendLine("</div>");
        }
      }

      // Delete the in between - Closes the two divs
      // output.AppendLine("</div>");
      // output.AppendLine("</div>");
      // Delete the in between - Closes the two divs

      output.AppendLine($"</{detailsTag}>");
      if(page.Depth < 1) 
      {      
        output.AppendLine("</div>");
      }
    }
    
    if (Text.Has(wrapper))
    {
      // Accu.Dev.Log("wrapper.Length", wrapper.Length);
      return new HtmlString(string.Format(wrapper, output.ToString()));
    }
    return new HtmlString(output.ToString());
  } 

  public string MakeTile(MenuNode page)
  {
    System.Text.StringBuilder output = new System.Text.StringBuilder();
    string debugTooltip = MakeDebugTooltip(page);
    string elNodePageId = $"node-pageid-{page.TabId}";
    string isActive = (page.Depth > 0 && page.Breadcrumb) ? "data-active" : string.Empty;
    bool hasChildren = page.HasChildren();
    string summaryTag = hasChildren ? "summary" : "div";
    output.AppendLine($"<{summaryTag} class=\"flex cursor-pointer list-none items-center gap-4 font-semibold text-zinc-700\" {isActive}>");
    if (debug) { output.AppendLine($"<span class=\"font-semibold text-green-700\" title=\"{debugTooltip}\", id=\"{elNodePageId}\">"); }
    output.AppendLine(MakeLinkOrText(page));
    output.AppendLine($"</span>");
    if(hasChildren)
    {
      // Building SVG Chevron
      string openLevelDepth = $"group-open/nav-d{page.Depth}"; // group-open/nav-d0 group-open/nav-d1 group-open/nav-d2 group-open/nav-d3 group-open/nav-d4 group-open/nav-d5
      output.AppendLine(string.Format(svgTemplate, page.Depth));
    }
    output.AppendLine($"</{summaryTag}>");
    return output.ToString();
  }

  public string MakeLinkOrText(MenuNode page)
  {
    string attrTarget = !string.IsNullOrEmpty(page.Target) ? ($"target=\"{page.Target}\"") : string.Empty;
    string attrHref = page.Enabled ? page.Url : "javascript:void(0);";
    if (page.TabId == 23)
    {
      // swap to Icon output for Search Results page 
      string output = "<i class=\"fa-regular fa-magnifying-glass-arrow-right fa-xl\"></i>";
      output = $"<span>{output}</span>";
      return $"<a href=\"{page.Url}\" {attrTarget} class=\"text-zinc-700 font-semibold\">{output}</a>";
    }
    if (page.Enabled)
    {
      return $"<a href=\"{page.Url}\" {attrTarget} class=\"text-zinc-700 font-semibold\">{page.Text}</a>";
    }
    // page is Link Disabled (page.Enabled == false or [TabInfo].DisableLink == true)
    // Better/Accessibility Implementation, see https://github.com/Accuraty/AccuTheme-Tw4/issues/40 
    return $@"
    <a class=""aria-disabled: text-black no-underline cursor-not-allowed pointer-events-none"" 
      role=""link"" aria-disabled=""true"" tabindex=""-1"" 
      title=""This page is Link Disabled (URL would have been: {page.Url})"">
      {page.Text}
    </a>";
  }

  public string MakeDebugTooltip(MenuNode page)
  {
    return $"TabId: {page.TabId}\n HasChildren: {page.HasChildren()}\n Depth: {page.Depth}\n Enabled: {page.Enabled}\n Breadcrumb: {page.Breadcrumb}\n Target: {page.Target}\n Url: {page.Url}\n Text: {page.Text}";
  }
}
