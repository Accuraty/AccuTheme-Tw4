@using System.Text.RegularExpressions;
@using System.Text.Json;
@using System.IO;
@using System.Net;
@using System.Net.Sockets;
@using System.Web;
@using DotNetNuke.Entities.Portals;
@using DotNetNuke.Common.Utilities;    @* .DataCache *@
@* @using ToSic.Razor.Blade; *@

@functions {

  // ==========================================================================
  // Sections
  // --
  // 1. Theme
  // 2. Misc
  // X. Dnn               >> moved to AccuKit
  // X. Polymorphism      >> moved to AccuKit
  // X. Other             >> moved to AccuKit
  // ==========================================================================

  public static string Version() { return "20250303"; }




  //
  // 1. Theme
  // ========
  //
  // Skin, Containers, etc.
  // --------------------------------------------------------------------------

  // Accuraty's SkinPath variable for DNN 9+, root of the skin folder
  // https://dnndocs.com/api/DotNetNuke.Entities.Portals.PortalSettings.html
  public static string SkinPath = PortalSettings.Current.ActiveTab.SkinPath;
  public static string SkinCssPath = SkinPath + "dist";
  public static string SkinJsPath = SkinPath + "dist";
  public static string SkinMediaPath = SkinPath + "dist/media";
  public static string SkinImagesPath = SkinMediaPath + "/images";
  public static string SkinSvgPath = SkinMediaPath + "/svg";

  public static bool skinFileExists(string skinPath, string fileName)
  {
    return System.IO.File.Exists(HttpContext.Current.Server.MapPath(skinPath + "/" + fileName));
  }

  public static bool IsHomePage() {
    return PortalSettings.Current.ActiveTab.TabID == PortalSettings.Current.HomeTabId;
  }
  public static bool isHomePage() {
    return IsHomePage();
  }


/*
  public static bool IsUnCacheEnabled() {
    string uncacheValue = GetSetting(key: "unCache");
    return string.Equals(uncacheValue, "true", StringComparison.OrdinalIgnoreCase);
  }

  public static string GetSetting(string key, string section = "default") {
    string cacheKey = "AccuTheme-json";
    const int cacheTimeout = 5; // seconds
    string jsonContent = DataCache.GetCache<string>(cacheKey);

    if (string.IsNullOrEmpty(jsonContent))
    {
      try
      {
        jsonContent = GetAccuThemeJson("AccuTheme");

        // Validate the JSON content
        using (JsonDocument.Parse(jsonContent)) { } // This will throw an exception if invalid

        DataCache.SetCache(cacheKey, jsonContent);
      }
      catch (JsonException ex)
      {
        // Log the exception using DNN's logging mechanism
        //Exceptions.LogException(ex);
        throw new Exception("Invalid AccuTheme.json format.", ex); // Re-throw the exception
      }
      catch (Exception ex)
      {
        // Log other exceptions
        //Exceptions.LogException(ex);
        throw; // Re-throw the exception
      }
    }

    string keyValue = string.Empty;
    using (JsonDocument jsonDocument = JsonDocument.Parse(jsonContent))
    {
      JsonElement root = jsonDocument.RootElement;
      if (root.TryGetProperty(section, out JsonElement sectionElement))
      {
        if (sectionElement.TryGetProperty(key, out JsonElement valueElement))
        {
          keyValue = valueElement.GetString();
        }
      }
    }

    return keyValue;
  }

  public static string GetAccuThemeJson(string jsonFilename)
  {
    if ( !skinFileExists(SkinPath, $"{jsonFilename}.json") )
    {
      return string.Empty;
    }
    string filePath = HttpContext.Current.Server.MapPath($"{SkinPath}/{jsonFilename}.json");
    string jsonContent = string.Empty;
    try
    {
      jsonContent = System.IO.File.ReadAllText(filePath);
    }
    catch (Exception ex)
    {
      // log the exception, return empty string?
    }
    return jsonContent;
  }
*/

  public static HtmlString AccuIcon(string iconName) {
    string name = ToSlug(iconName);
    string svgSprite = SkinSvgPath + "/AccuTheme-icons.svg";
    string output = "<svg class=\"svg svg--icon\" width=\"1em\" height=\"1em\" fill=\"currentColor\" focusable=\"false\" aria-hidden=\"true\"><use xlink:href=\"" + svgSprite + "#" + name + "\"></use></svg>";

    return new HtmlString(output);
  }

  public static HtmlString BootstrapIcon(string iconName) {
    string name = ToSlug(iconName);
    string svgSprite = SkinSvgPath + "/bootstrap-icons.svg";
    string output = "<svg class=\"svg svg--icon bi\" width=\"1em\" height=\"1em\" fill=\"currentColor\" focusable=\"false\" aria-hidden=\"true\"><use xlink:href=\"" + svgSprite + "#" + name + "\"></use></svg>";

    return new HtmlString(output);
  }




  //
  // 2. Misc
  // =============
  //
  // Utilities that simplify common needs (in AccuTheme)
  // --------------------------------------------------------------------------

  // by IP, is the remote IP address a known Accuraty WAN IP?
  public static bool isAccuratyIP() {
    var list = new List<string> {
      "127.0.0.1",        // localhost
      "140.141.191.145", // 1800OAK 202212 (JRF)
    };
    return list.Contains(GetIpAddress());
  }

  // Get IP address of the visitor
  public static string GetIpAddress() {
    string stringIpAddress;
    stringIpAddress = Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
    if (stringIpAddress == null) {
      stringIpAddress = Request.ServerVariables["REMOTE_ADDR"];
    }
    return stringIpAddress;
  }

  // Turn any text or title in to a URL Slug
  // https://stackoverflow.com/questions/2920744/url-slugify-algorithm-in-c
  public static string ToSlug(string phrase) {
    byte[] bytes = System.Text.Encoding.GetEncoding("Cyrillic").GetBytes(phrase);
    string str = System.Text.Encoding.ASCII.GetString(bytes);
    str = str.ToLower();
    // invalid chars
    str = Regex.Replace(str, @"[^a-z0-9\s-]", "");
    // convert multiple spaces into one space
    str = Regex.Replace(str, @"\s+", " ").Trim();
    // cut and trim
    str = str.Substring(0, str.Length <= 45 ? str.Length : 45).Trim();
    str = Regex.Replace(str, @"\s", "-"); // hyphens
    return str;
  }

  // Get the version of an installed DLL in /bin
  // example: expecting "ToSic.Razor" and we assume its in /bin and add ends in .dll
  public static string GetVersion(string pathFile) {
    string target = HttpContext.Current.Server.MapPath("bin/" + pathFile + ".dll");
    if(System.IO.File.Exists(target)) {
      return System.Reflection.Assembly.LoadFrom(target).GetName().Version.ToString();
    }
    else {
      return "DLL not found";
    }
  }

}
